<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Volunteer Skill & Availability Scheduler</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <style>
    /* Basic reset */
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background: #f9fafb;
      color: #111827;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    #app {
      display: grid;
      grid-template-columns: 280px 1fr;
      grid-template-rows: 64px 1fr 40px;
      grid-template-areas:
        "header header"
        "sidebar main"
        "footer footer";
      height: 100vh;
      overflow: hidden;
    }
    header {
      grid-area: header;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1.5rem;
      background: rgba(255 255 255 / 0.9);
      backdrop-filter: blur(12px);
      box-shadow: 0 2px 8px rgba(0,0,0,.1);
      position: sticky;
      top:0;
    }
    header .brand {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 700;
      font-size: 1.25rem;
      color: #4f46e5;
      user-select: none;
    }
    header button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 24px;
      color: #4f46e5;
      transition: color 0.3s ease;
    }
    aside {
      grid-area: sidebar;
      background: rgba(255 255 255 / 0.9);
      padding: 1rem;
      box-shadow: inset -1px 0 0 rgba(0,0,0,.1);
      display: flex;
      flex-direction: column;
      gap: 1rem;
      overflow-y: auto;
    }
    nav.sidebar-nav button {
      display: flex;
      align-items: center;
      gap: 10px;
      background: none;
      border: none;
      padding: 12px 16px;
      border-radius: 12px;
      cursor: pointer;
      color: inherit;
      font-size: 1rem;
      transition: background-color 0.3s ease;
    }
    nav.sidebar-nav button:hover,
    nav.sidebar-nav button[aria-current="page"] {
      background: #4f46e5;
      color: white;
      font-weight: 600;
      box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);
    }
    main {
      grid-area: main;
      padding: 1.5rem 2rem;
      overflow-y: auto;
      min-height: 0;
      background: transparent;
      display: flex;
      flex-direction: column;
    }
    h2.section-title {
      font-weight: 700;
      font-size: clamp(1.5rem, 2vw, 2rem);
      margin-bottom: 1rem;
      color: #4f46e5;
      user-select: none;
    }
    .volunteers-container {
      display: flex;
      gap: 2rem;
      flex-wrap: wrap;
      min-height: 500px;
    }
    .volunteer-list {
      flex: 1 1 320px;
      max-width: 400px;
      background: rgba(255 255 255 / 0.9);
      padding: 1rem;
      border-radius: 16px;
      box-shadow: 0 6px 16px rgba(0,0,0,.1);
      display: flex;
      flex-direction: column;
      max-height: 70vh;
      overflow-y: auto;
      list-style: none;
    }
    .volunteer-list h3 {
      margin-bottom: 1rem;
      font-weight: 600;
      color: #4f46e5;
      user-select: none;
    }
    .volunteer-item {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 8px;
      border-radius: 12px;
      cursor: pointer;
      user-select: none;
      border: 2px solid transparent;
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    .volunteer-item:hover {
      background-color: #4338ca;
      color: white;
    }
    .volunteer-item.selected {
      background-color: #4f46e5;
      color: white;
      font-weight: 700;
      border-color: #4338ca;
      box-shadow: 0 4px 10px rgba(79, 70, 229, 0.4);
    }
    .avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #4f46e5;
      color: white;
      font-weight: 700;
      font-size: 1.1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
      flex-shrink: 0;
    }
    .skill-tag {
      background-color: #4f46e5;
      color: white;
      font-size: 0.8rem;
      padding: 2px 8px;
      border-radius: 8px;
      margin-top: 4px;
      margin-right: 4px;
      display: inline-block;
      font-weight: 600;
      user-select: none;
    }
    .volunteer-form {
      flex: 2 1 500px;
      max-width: 700px;
      background: rgba(255 255 255 / 0.9);
      padding: 1.5rem 2rem;
      border-radius: 16px;
      box-shadow: 0 6px 16px rgba(0,0,0,.1);
      overflow-y: auto;
      max-height: 70vh;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .volunteer-form h3 {
      font-weight: 700;
      color: #4f46e5;
      user-select: none;
    }
    label {
      font-weight: 600;
      margin-bottom: 6px;
      display: block;
    }
    input[type='text'], input[type='email'], select, textarea, input[type='time'], input[type='date'] {
      font-size: 1rem;
      padding: 10px;
      width: 100%;
      border-radius: 12px;
      border: 1.6px solid #ccc;
      background: transparent;
      color: inherit;
      transition: border-color 0.3s ease;
      resize: vertical;
    }
    input:focus {
      border-color: #4f46e5;
      outline: none;
    }
    .error-message {
      margin-top: 4px;
      color: #dc2626;
      font-size: 0.85rem;
      user-select: none;
    }
    .btn {
      cursor: pointer;
      background-color: #4f46e5;
      color: white;
      padding: 12px 30px;
      border-radius: 50px;
      font-weight: 700;
      font-size: 1rem;
      border: none;
      box-shadow: 0 8px 24px rgba(79, 70, 229, 0.3);
      user-select: none;
      align-self: flex-start;
      margin-top: 0.5rem;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }
    .btn:hover {
      background-color: #4338ca;
      transform: translateY(-3px);
    }
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
      transform: none;
    }
    #availability-section {
      border: 1px solid #ccc;
      border-radius: 12px;
      padding: 12px;
      background: #fff;
      margin-top: 1rem;
    }
    #date-picker-container {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
      margin-bottom: 12px;
    }
    .date-chip {
      background: #4f46e5;
      color: white;
      border-radius: 24px;
      padding: 6px 12px;
      cursor: pointer;
      user-select: none;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    .date-chip .remove-btn {
      cursor: pointer;
      font-size: 18px;
    }
    .date-intervals {
      border-top: 1px solid #ddd;
      margin-top: 12px;
      padding-top: 12px;
    }
    .date-intervals h4 {
      margin-bottom: 8px;
      color: #4f46e5;
    }
    .interval {
      display: flex;
      align-items: center;
      gap: 14px;
      margin: 6px 0;
    }
    .interval input[type="time"] {
      padding: 6px;
      width: 120px;
      font-size: 1rem;
    }
    .interval button.remove-interval {
      background-color: #dc2626;
      border: none;
      border-radius: 8px;
      color: white;
      padding: 6px 8px;
      cursor: pointer;
      font-weight: 700;
      transition: background-color 0.2s ease;
    }
    .interval button.remove-interval:hover {
      background-color: #b91c1c;
    }
    button.add-interval {
      margin-top: 10px;
      background-color: #4f46e5;
      border: none;
      color: white;
      border-radius: 12px;
      padding: 8px 16px;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.3s ease;
    }
    button.add-interval:hover {
      background-color: #4338ca;
    }
    #toast-container {
      position: fixed;
      bottom: 24px;
      right: 24px;
      max-width: 320px;
      display: flex;
      flex-direction: column;
      gap: 12px;
      z-index: 1000;
    }
    .toast {
      display: flex;
      align-items: center;
      gap: 12px;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 12px;
      padding: 12px 18px;
      box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
      user-select: none;
      cursor: pointer;
      font-weight: 600;
      color: #4f46e5;
      animation: slide-in 0.3s ease forwards;
    }
    .toast:hover {
      background-color: #4f46e5;
      color: white;
    }
    .toast .material-icons {
      font-size: 24px;
      flex-shrink: 0;
    }
    @keyframes slide-in {
      from {
        opacity: 0;
        transform: translateX(30px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    @media (max-width: 1024px) {
      #app {
        grid-template-columns: 1fr;
        grid-template-rows: 64px auto 40px;
        grid-template-areas:
          "header"
          "main"
          "footer";
      }
      aside {
        display: none;
      }
      .volunteers-container {
        flex-direction: column;
      }
      main {
        padding: 1rem;
      }
      .volunteer-list,
      .volunteer-form {
        max-width: 100%;
        max-height: none;
        height: auto;
        margin-bottom: 1.5rem;
      }
    }
  </style>
</head>
<body>
  <div id="app">
    <header role="banner">
      <div class="brand" aria-label="Volunteer Scheduler">
        <span class="material-icons" aria-hidden="true">groups</span>
        <span>Volunteer Scheduler</span>
      </div>
      <button id="theme-toggle" aria-pressed="false" aria-label="Toggle dark mode" title="Toggle dark mode">
        <span class="material-icons" aria-hidden="true">dark_mode</span>
      </button>
    </header>
    <aside role="navigation" aria-label="Main Navigation">
      <nav class="sidebar-nav" role="menubar" aria-orientation="vertical">
        <button role="menuitem" aria-current="page" id="nav-volunteers" tabindex="0" aria-label="Volunteers section">
          <span class="material-icons" aria-hidden="true">person</span>
          Volunteers
        </button>
        <button role="menuitem" id="nav-tasks" tabindex="-1" aria-label="Tasks section">
          <span class="material-icons" aria-hidden="true">task_alt</span>
          Tasks
        </button>
        <button role="menuitem" id="nav-settings" tabindex="-1" aria-label="Settings section">
          <span class="material-icons" aria-hidden="true">settings</span>
          Settings
        </button>
      </nav>
    </aside>
    <main role="main" tabindex="-1">
      <section id="section-volunteers" aria-label="Volunteers Section" tabindex="0">
        <h2 class="section-title">Volunteers</h2>
        <div class="volunteers-container">
          <aside class="volunteer-list" aria-label="Volunteer list" tabindex="0" role="list">
            <h3>Volunteer Pool</h3>
            <ul id="volunteer-list-ul" role="listbox" aria-multiselectable="false" style="list-style:none; padding-left:0; margin:0;"></ul>
          </aside>
          <section class="volunteer-form" aria-label="Selected Volunteer Details and Edit Form">
            <h3 id="form-title">Add New Volunteer</h3>
            <form id="volunteer-form" novalidate>
              <div>
                <label for="vol-name">Full Name</label>
                <input type="text" id="vol-name" name="name" autocomplete="name" placeholder="Enter full name" aria-describedby="error-name" required />
                <div id="error-name" class="error-message" aria-live="assertive"></div>
              </div>
              <div>
                <label for="vol-email">Email Address</label>
                <input type="email" id="vol-email" name="email" autocomplete="email" placeholder="example@example.com" aria-describedby="error-email" required />
                <div id="error-email" class="error-message" aria-live="assertive"></div>
              </div>
              <div>
                <label for="vol-skills">Skills</label>
                <select id="vol-skills" name="skills" aria-describedby="error-skills" required>
                  <option value="" disabled selected>Select a skill</option>
                  <option value="Fundraising">Fundraising</option>
                  <option value="Social Media">Social Media</option>
                  <option value="Awareness">Awareness</option>
                  <option value="Others">Others</option>
                </select>
                <input type="text" id="other-skill" placeholder="Please specify skill" style="margin-top:8px; display:none; width:100%; padding:8px; border-radius:8px; border:1px solid #ccc; font-size:1rem;" />
                <div id="error-skills" class="error-message" aria-live="assertive"></div>
              </div>
              <div id="availability-section" aria-label="Weekly availability with date and time intervals">
                <label for="date-selector">Select Dates You Are Available</label>
                <input type="date" id="date-selector" aria-describedby="date-desc" />
                <small id="date-desc">Add one or more dates to specify your availability times.</small>
                <div id="date-picker-container" aria-live="polite" aria-atomic="true" aria-relevant="additions removals"></div>
                <div id="intervals-container"></div>
                <div id="availability-error" class="error-message" role="alert" aria-live="assertive"></div>
              </div>
              <button type="submit" class="btn" id="save-volunteer-btn" aria-live="polite">Save Volunteer</button>
              <button type="button" class="btn" id="delete-volunteer-btn" style="background-color:#dc2626; margin-left: 12px; display:none;" aria-live="polite" aria-label="Delete volunteer">
                <span class="material-icons" aria-hidden="true">delete</span> Delete
              </button>
            </form>
          </section>
        </div>
      </section>
    </main>
    <footer role="contentinfo" style="grid-area: footer; padding: 8px 16px; background: rgba(255 255 255 / 0.9); backdrop-filter: blur(10px); text-align: center; font-size: 0.85rem; color: #4f46e5; user-select:none;">
      Volunteer Scheduler © 2024 | NGO Support Platform
    </footer>
  </div>
  <div id="toast-container" aria-live="assertive" aria-atomic="true"></div>

  <script>
  (() => {
    'use strict';
    // References
    const volunteerForm = document.getElementById('volunteer-form');
    const skillsSelect = document.getElementById('vol-skills');
    const otherSkillInput = document.getElementById('other-skill');
    const errorSkills = document.getElementById('error-skills');

    let volunteers = JSON.parse(localStorage.getItem('volSchedVolunteers') || '[]');
    let selectedVolunteerId = null;
    let availability = [];
    let selectedDate = null;

    // Show/hide other skill input based on dropdown selection
    skillsSelect.addEventListener('change', () => {
      if (skillsSelect.value === 'Others') {
        otherSkillInput.style.display = 'block';
        otherSkillInput.required = true;
      } else {
        otherSkillInput.style.display = 'none';
        otherSkillInput.required = false;
        errorSkills.textContent = '';
      }
    });

    // Function to get selected skill value including "Others"
    function getSelectedSkill() {
      if (skillsSelect.value === 'Others') {
        return otherSkillInput.value.trim();
      }
      return skillsSelect.value;
    }

    // Validate skill field
    function validateSkill() {
      errorSkills.textContent = '';
      const skill = getSelectedSkill();
      if (!skill) {
        errorSkills.textContent = 'Please select or enter a skill.';
        return false;
      }
      return true;
    }

    // Availability UI related variables and functions
    const dateSelector = document.getElementById('date-selector');
    const datePickerContainer = document.getElementById('date-picker-container');
    const intervalsContainer = document.getElementById('intervals-container');
    const availabilityError = document.getElementById('availability-error');

    // Utilities
    function generateId() {
      return '_' + Math.random().toString(36).substr(2, 9) + Date.now().toString(36).substr(4, 5);
    }
    function formatDate(dateStr) {
      const d = new Date(dateStr);
      if (isNaN(d)) return dateStr;
      return d.toLocaleDateString(undefined, { month: 'short', day: 'numeric', weekday: 'short' });
    }

    // Render date chips for availability
    function renderDateChips() {
      datePickerContainer.innerHTML = '';
      availability.forEach(entry => {
        const chip = document.createElement('div');
        chip.className = 'date-chip';
        chip.tabIndex = 0;
        chip.role = 'button';
        chip.setAttribute('aria-label', `Remove date ${formatDate(entry.date)}`);
        chip.textContent = formatDate(entry.date);
        chip.dataset.date = entry.date;
        const removeBtn = document.createElement('span');
        removeBtn.className = 'remove-btn material-icons';
        removeBtn.textContent = 'close';
        removeBtn.title = `Remove ${formatDate(entry.date)}`;
        removeBtn.onclick = e => {
          e.stopPropagation();
          removeDate(entry.date);
        };
        chip.appendChild(removeBtn);
        chip.onclick = () => selectDate(entry.date);
        chip.onkeydown = e => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); selectDate(entry.date); } };
        datePickerContainer.appendChild(chip);
      });
      if (availability.length) {
        if (!selectedDate || !availability.some(av => av.date === selectedDate)) selectedDate = availability[0].date;
        renderIntervals(selectedDate);
      } else {
        selectedDate = null;
        intervalsContainer.innerHTML = '<p>No dates selected.</p>';
      }
    }

    // Add date on date selection
    dateSelector.addEventListener('change', () => {
      const val = dateSelector.value;
      if (!val) return;
      if (!availability.some(av => av.date === val)) {
        availability.push({ date: val, intervals: [] });
        availabilityError.textContent = '';
        renderDateChips();
      } else {
        alert("Date already added.");
      }
      dateSelector.value = '';
    });

    // Remove a date from availability
    function removeDate(date) {
      availability = availability.filter(av => av.date !== date);
      if (selectedDate === date) selectedDate = availability.length ? availability[0].date : null;
      renderDateChips();
    }

    // Select a date to view/edit intervals
    function selectDate(date) {
      selectedDate = date;
      renderIntervals(date);
      const chips = datePickerContainer.querySelectorAll('.date-chip');
      chips.forEach(chip => chip.style.outline = chip.dataset.date === date ? '2px solid #4f46e5' : 'none');
    }

    // Render time intervals of selected date
    function renderIntervals(date) {
      intervalsContainer.innerHTML = '';
      if (!date) {
        intervalsContainer.innerHTML = '<p>No date selected.</p>';
        return;
      }
      const entry = availability.find(av => av.date === date);
      if (!entry) return;
      const container = document.createElement('div');
      container.className = 'date-intervals';
      const heading = document.createElement('h4');
      heading.textContent = `Availability for ${formatDate(date)}`;
      container.appendChild(heading);
      if (entry.intervals.length === 0) {
        const p = document.createElement('p');
        p.textContent = "No intervals added yet.";
        container.appendChild(p);
      }
      entry.intervals.forEach((interval, index) => container.appendChild(createIntervalRow(interval.start, interval.end, index)));
      const addBtn = document.createElement('button');
      addBtn.type = 'button';
      addBtn.className = 'add-interval';
      addBtn.textContent = '+ Add time interval';
      addBtn.onclick = () => {
        entry.intervals.push({ start: '09:00', end: '17:00' });
        renderIntervals(date);
      };
      container.appendChild(addBtn);
      intervalsContainer.appendChild(container);
    }

    // Create a time interval row with start and end inputs
    function createIntervalRow(start, end, idx) {
      const row = document.createElement('div');
      row.className = 'interval';
      const startLabel = document.createElement('label');
      startLabel.textContent = 'Start:';
      startLabel.htmlFor = `start-${idx}`;
      startLabel.style.marginRight = '4px';
      row.appendChild(startLabel);
      const startInput = document.createElement('input');
      startInput.type = 'time';
      startInput.id = `start-${idx}`;
      startInput.value = start;
      startInput.onchange = e => updateInterval(idx, e.target.value, null);
      row.appendChild(startInput);
      const endLabel = document.createElement('label');
      endLabel.textContent = 'End:';
      endLabel.htmlFor = `end-${idx}`;
      endLabel.style.margin = '0 4px 0 16px';
      row.appendChild(endLabel);
      const endInput = document.createElement('input');
      endInput.type = 'time';
      endInput.id = `end-${idx}`;
      endInput.value = end;
      endInput.onchange = e => updateInterval(idx, null, e.target.value);
      row.appendChild(endInput);
      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'remove-interval material-icons';
      removeBtn.title = 'Remove this interval';
      removeBtn.textContent = 'close';
      removeBtn.onclick = () => {
        removeInterval(idx);
      };
      row.appendChild(removeBtn);
      return row;
    }

    function updateInterval(idx, newStart, newEnd) {
      if (!selectedDate) return;
      const entry = availability.find(av => av.date === selectedDate);
      if (!entry) return;
      if (newStart !== null) entry.intervals[idx].start = newStart;
      if (newEnd !== null) entry.intervals[idx].end = newEnd;
    }

    function removeInterval(idx) {
      if (!selectedDate) return;
      const entry = availability.find(av => av.date === selectedDate);
      if (!entry) return;
      entry.intervals.splice(idx, 1);
      renderIntervals(selectedDate);
    }

    // Clear all error messages
    function clearErrors() {
      ['error-name', 'error-email', 'error-skills'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.textContent = '';
      });
      availabilityError.textContent = '';
    }

    // Validate availability data
    function validateAvailability() {
      availabilityError.textContent = '';
      if (availability.length === 0) {
        availabilityError.textContent = 'Please select at least one date to specify availability.';
        return false;
      }
      for (const dayEntry of availability) {
        if (dayEntry.intervals.length === 0) {
          availabilityError.textContent = `Please add at least one time interval for ${formatDate(dayEntry.date)}.`;
          return false;
        }
        for (const interval of dayEntry.intervals) {
          if (!interval.start || !interval.end) {
            availabilityError.textContent = `Start and end time are required for all intervals on ${formatDate(dayEntry.date)}.`;
            return false;
          }
          if (interval.start >= interval.end) {
            availabilityError.textContent = `Start time must be before end time on ${formatDate(dayEntry.date)}.`;
            return false;
          }
        }
      }
      return true;
    }

    // Validate entire form including skill and availability
    function validateForm() {
      clearErrors();
      let isValid = true;

      const name = document.getElementById('vol-name').value.trim();
      if (!name) {
        document.getElementById('error-name').textContent = 'Name is required.';
        isValid = false;
      } else if (name.length < 3) {
        document.getElementById('error-name').textContent = 'Name must be at least 3 characters.';
        isValid = false;
      }

      const email = document.getElementById('vol-email').value.trim();
      const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email) {
        document.getElementById('error-email').textContent = 'Email is required.';
        isValid = false;
      } else if (!emailPattern.test(email)) {
        document.getElementById('error-email').textContent = 'Invalid email address.';
        isValid = false;
      }

      let skill = null;
      const skillsDropdown = document.getElementById('vol-skills');
      if (skillsDropdown.value === 'Others') {
        const otherInput = document.getElementById('other-skill');
        skill = otherInput.value.trim();
        if (!skill) {
          document.getElementById('error-skills').textContent = 'Please specify your skill.';
          isValid = false;
        }
      } else if (!skillsDropdown.value) {
        document.getElementById('error-skills').textContent = 'Please select a skill.';
        isValid = false;
      } else {
        skill = skillsDropdown.value;
      }

      if (!validateAvailability()) isValid = false;

      return {
        isValid,
        data: {
          name,
          email,
          skills: skill ? [skill] : [],
          availability
        }
      };
    }

    // Render volunteer list
    function renderVolunteerList() {
      volunteerListUl.innerHTML = '';

      if (volunteers.length === 0) {
        const li = document.createElement('li');
        li.textContent = 'No volunteers available.';
        volunteerListUl.appendChild(li);
        return;
      }

      volunteers.forEach(vol => {
        const li = document.createElement('li');
        li.tabIndex = 0;
        li.setAttribute('role', 'option');
        li.setAttribute('aria-selected', selectedVolunteerId === vol.id ? 'true' : 'false');
        li.className = 'volunteer-item' + (selectedVolunteerId === vol.id ? ' selected' : '');
        li.dataset.id = vol.id;
        li.onclick = () => selectVolunteer(vol.id);
        li.onkeydown = e => { if (['Enter', ' '].includes(e.key)) { e.preventDefault(); selectVolunteer(vol.id); } };

        const avatar = document.createElement('div');
        avatar.className = 'avatar';
        avatar.textContent = vol.name.split(' ').map(n => n[0].toUpperCase()).slice(0, 2).join('');
        avatar.setAttribute('aria-hidden', 'true');
        li.appendChild(avatar);

        const info = document.createElement('div');
        info.style.flexGrow = '1';
        info.style.minWidth = '0';

        const nameSpan = document.createElement('span');
        nameSpan.textContent = vol.name;
        nameSpan.style.fontWeight = '600';
        nameSpan.style.display = 'block';
        nameSpan.style.whiteSpace = 'nowrap';
        nameSpan.style.textOverflow = 'ellipsis';
        nameSpan.style.overflow = 'hidden';

        const emailSpan = document.createElement('span');
        emailSpan.textContent = vol.email;
        emailSpan.style.color = 'gray';
        emailSpan.style.fontSize = '0.85rem';
        emailSpan.style.display = 'block';
        emailSpan.style.whiteSpace = 'nowrap';
        emailSpan.style.textOverflow = 'ellipsis';
        emailSpan.style.overflow = 'hidden';

        info.appendChild(nameSpan);
        info.appendChild(emailSpan);
        li.appendChild(info);

        const skillsDiv = document.createElement('div');
        vol.skills.slice(0, 3).forEach(skill => {
          const skSpan = document.createElement('span');
          skSpan.className = 'skill-tag';
          skSpan.textContent = skill;
          skillsDiv.appendChild(skSpan);
        });
        if (vol.skills.length > 3) {
          const moreSpan = document.createElement('span');
          moreSpan.textContent = `+${vol.skills.length - 3}`;
          moreSpan.title = vol.skills.slice(3).join(', ');
          moreSpan.style.marginLeft = '6px';
          moreSpan.style.color = 'gray';
          skillsDiv.appendChild(moreSpan);
        }
        li.appendChild(skillsDiv);
        volunteerListUl.appendChild(li);
      });
    }

    // Select volunteer to edit
    function selectVolunteer(id) {
      const vol = volunteers.find(v => v.id === id);
      if (!vol) return;
      selectedVolunteerId = id;
      renderVolunteerList();
      formTitle.textContent = 'Edit Volunteer';
      document.getElementById('vol-name').value = vol.name;
      document.getElementById('vol-email').value = vol.email;

      // Set skill controls
      const skillsDropdown = document.getElementById('vol-skills');
      const otherSkillInput = document.getElementById('other-skill');
      if (vol.skills.length === 1 && ['Fundraising', 'Social Media', 'Awareness'].includes(vol.skills[0])) {
        skillsDropdown.value = vol.skills[0];
        otherSkillInput.style.display = 'none';
        otherSkillInput.value = '';
      } else {
        skillsDropdown.value = 'Others';
        otherSkillInput.style.display = 'block';
        otherSkillInput.value = vol.skills.join(', ');
      }

      availability = JSON.parse(JSON.stringify(vol.availability || []));
      selectedDate = availability.length ? availability[0].date : null;
      renderDateChips();
      deleteVolunteerBtn.style.display = 'inline-block';
      clearErrors();
    }

    // Remove volunteer
    deleteVolunteerBtn.onclick = () => {
      if (!selectedVolunteerId) return;
      if (confirm('Are you sure you want to delete this volunteer?')) {
        volunteers = volunteers.filter(v => v.id !== selectedVolunteerId);
        localStorage.setItem('volSchedVolunteers', JSON.stringify(volunteers));
        selectedVolunteerId = null;
        resetVolunteerForm();
        renderVolunteerList();
        showToast('Volunteer deleted.', 'delete');
      }
    };

    // Clear all errors
    function clearErrors() {
      ['error-name', 'error-email', 'error-skills'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.textContent = '';
      });
      availabilityError.textContent = '';
    }

    // Save button handler
    volunteerForm.onsubmit = e => {
      e.preventDefault();
      const validation = validateForm();
      if (!validation.isValid) return;
      const data = validation.data;

      if (!selectedVolunteerId) {
        const newVol = { id: generateId(), ...data };
        volunteers.push(newVol);
        showToast(`Volunteer "${newVol.name}" added successfully.`, 'check_circle');
      } else {
        const i = volunteers.findIndex(v => v.id === selectedVolunteerId);
        if (i === -1) return;
        volunteers[i] = { id: selectedVolunteerId, ...data };
        showToast(`Volunteer "${data.name}" updated successfully.`, 'check_circle');
      }

      localStorage.setItem('volSchedVolunteers', JSON.stringify(volunteers));
      renderVolunteerList();
      resetVolunteerForm();
    };

    // Reset form to initial state
    function resetVolunteerForm() {
      formTitle.textContent = 'Add New Volunteer';
      volunteerForm.reset();
      clearErrors();
      document.getElementById('other-skill').style.display = 'none';
      document.getElementById('other-skill').value = '';
      document.getElementById('vol-skills').value = "";
      availability = [];
      selectedDate = null;
      renderDateChips();
      deleteVolunteerBtn.style.display = 'none';
    }

    // Toast notification
    function showToast(message, icon = 'info') {
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.setAttribute('role', 'alert');
      toast.tabIndex = 0;

      const iconSpan = document.createElement('span');
      iconSpan.className = 'material-icons';
      iconSpan.setAttribute('aria-hidden', 'true');
      iconSpan.textContent = icon;
      toast.appendChild(iconSpan);

      const msgSpan = document.createElement('span');
      msgSpan.textContent = message;
      toast.appendChild(msgSpan);

      const toastContainer = document.getElementById('toast-container');
      toastContainer.appendChild(toast);

      toast.onclick = () => toast.remove();
      setTimeout(() => toast.remove(), 4000);
      toast.focus();
    }

    // Availability date chips and intervals rendering functions here (same as previously provided)...

    // Please note for brevity, re-use the previous complete implementations for:
    // renderDateChips(), removeDate(), selectDate(), renderIntervals(), createIntervalRow(),
    // updateInterval(), removeInterval(), and other availability related methods.
    // They will handle the date picking and interval editing.

    // Initialize UI
    resetVolunteerForm();
    renderVolunteerList();

    // Show/hide the "Other skill" input as user selects it
    const skillsDropdown = document.getElementById('vol-skills');
    const otherSkillInput = document.getElementById('other-skill');
    skillsDropdown.addEventListener('change', () => {
      if(skillsDropdown.value === "Others"){
        otherSkillInput.style.display = "block";
        otherSkillInput.required = true;
      } else {
        otherSkillInput.style.display = "none";
        otherSkillInput.value = "";
        otherSkillInput.required = false;
        document.getElementById('error-skills').textContent = '';
      }
    });
  })();
</script>
</body>
</html>
